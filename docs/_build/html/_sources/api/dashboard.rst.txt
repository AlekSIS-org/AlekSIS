App: Dashboard
==============

Das Dashboard dient dazu, den Benutzer zu begrüßen (Startseite)
und seine letzten Aktivitäten anzuzeigen.

Außerdem zeigt das Dashboard aktuelle Nachrichten für den Benutzer an.

Aktivitäten
-----------

Definition einer Aktivität
    Als Aktivität gilt alles, was der Nutzer selbst macht, d.h., aktiv.

.. autoclass:: dashboard.models.Activity
    :members:

Benachrichtigungen
------------------

Definition einer Benachrichtigung
    Eine Benachrichtigung für einen Nutzer wird erstellt, wenn eine Aktion, die diesen betrifft,
    die er aber nicht selbst durchgeführt hat, passiert ist, um den Nutzer zu informieren.

.. autoclass:: dashboard.models.Notification
    :members:

Hinweis zum Erstellen von absoluten URLs auf der Basis relativer URLs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Dies wird durch übergabe eines dynamischen Linkes (z. B. /aub/1) an die Methode :func:`request.build_absolute_uri()` [1]_ erreicht.

Um einen dynamischen Link durch den Namen einer Django-URL zu "errechnen", dient die Funktion :func:`reverse()` [2]_.

.. seealso::
    .. [1] https://docs.djangoproject.com/en/2.1/ref/request-response/#django.http.HttpRequest.build_absolute_uri
    .. [2] https://docs.djangoproject.com/en/2.1/ref/urlresolvers/#reverse


Caches
------

SchoolApps benutzt eine angepasste Version des Django-Cache-Systems, welches dabei um eine Verwaltungsfunktion für verschiedene Caches ergänzt wurde.

Sitecache
    Ein Seitencache basiert auf dem Django-Decorator :func:`@cache_page`  und cacht die HTML-Ausgabe des entsprechenden Views.

Variablencache
    Ein Variablencache nutzt die Low-Level-Cache-API von Django und speichert den Inhalt einer Variable.

Verwaltung
^^^^^^^^^^

Jedes gecachte Objekt (ob Sitecache oder Variablencache) benötigt ein Cache-Objekt in der DB. Bei Cacheinhalten für die nur eine Variable gespeichert werden muss oder ein View, wird die Datei `caches.py` verwendet, wo der Cache als Konstante gespeichert ist:


.. code-block::

    <EXAMPLE_CACHE>, _ = Cache.objects.get_or_create(id="<example_cache>",
                                                     defaults={
                                                         "site_cache": <True/False>,
                                                         "name": "<Readable name>",
                                                         "expiration_time": <10>}) # in seconds

Verwendung
^^^^^^^^^^

Variablencache
..............


Für Variablencaches kann mit der Funktion :func:`get()` eines Cache-Objektes der aktuelle Inhalt des Caches abgefragt werden.
Bei abgelaufenen Caches wird ``False`` zurückgeben, dann ist der Wert neu zu berechnen
und mit :func:`update()` zu aktualisieren, wobei die Aktualisierungszeit automatisch zurückgesetzt wird.


Sitecache
.........

Für einen Sitecache kann folgender Decorator zum entsprechenden View hinzugefügt werden:

.. code-block::

    @cache_page(<EXAMPLE_CACHE>.expiration_time)

Hintergrundaktualisierung
^^^^^^^^^^^^^^^^^^^^^^^^^

API
^^^
.. autoclass:: dashboard.models.Cache
    :members:

Verschiedene Caches
^^^^^^^^^^^^^^^^^^^

.. automodule:: dashboard.caches
    :members:

.. seealso::
    - https://docs.djangoproject.com/en/2.2/topics/cache/