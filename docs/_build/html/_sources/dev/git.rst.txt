Git Management Guide
====================

Diese Anleitung soll bei der Benutzung von Git im Projekt SchoolApps helfen.

Hinweis
-------

Hilfe und Informationen zu Git allgemein gibt es u. a. bei dieser Anleitung:

    https://rogerdudler.github.io/git-guide/index.de.html

Git-Hosting von SchoolApps
--------------------------

Die aktuelle Version von SchoolApps ist auf GitHub in der Organisation Katharineum gehosted:

    https://github.com/Katharineum/school-apps

Das Cloning sowie Pullen und Pushen kann wahlweise mittels SSH oder HTTPS erfolgen (genaueres in der obigen Anleitung).

.. note::
    Der Zugriff auf das Repository wird von Herrn Poetzsch-Heffter (@poetzsch, p-h@katharineum.de) geregelt.

Clonen und Ersteinrichtung
--------------------------

Clonen:
    ``git clone https://github.com/Katharineum/school-apps``

    oder ``git clone git@github.com:Katharineum/school-apps.git``

Um sich eine Entwicklungsumgebung für SchoolApps einzurichten, wird die Anleitung auf

    https://github.com/Katharineum/school-apps/blob/dev/README.md

unter dem Reiter Installation empfohlen.

Was gibt es zu tun? – Issues
----------------------------

Issues anlegen
^^^^^^^^^^^^^^
Wenn einem in der SchoolApps etwas auffällt was getan werden sollte (Bug, Rechtschreibfehler, Zusätzliche Funktionen, etc.), dann muss ein Issue auf GitHub erstellt werden. Dies gilt auch, wenn man sich sicher ist, das Problem lösen zu können.

Wichtig beim Erstellen eines Issues:
""""""""""""""""""""""""""""""""""""

* Aussagekräftigen Titel verwenden (deutsch)
* Problem detailliert beschreiben, falls vorhanden, Lösungsmöglichkeit(en) nennen (deutsch)
* **Assignees (Zuständigkeit)** → Wenn man das Problem selbst lösen will bzw. sich darum kümmern will, empfiehlt es sich, sich selbst einzutragen. Damit ist man auch für die Lösung verantwortlich. Wenn man weiß, dass dieses Problem genau von einer bestimmten Person gelöst werden kann bzw. diese dafür zuständig ist, wird diese eingetragen. Es können auch mehrere Personen eingetragen werden.
* **Labels (Kategorisierung)**  →  Es gibt zwei Arten von Labels:

  * **Bereichslabel** → Hier wird der Teil der Software genannt, der von dem Issue betroffen ist (im Regelfall eine Django-App, manchmal auch *whole project*)
  * **Kategorisierungslabel** → Hier wird die Art des Issue festgelegt.

    * *bug* → Ein eindeutiger Fehler. (Sicherheits-/ Funktionsbeinträchtigend)
    * *beauty mistake* → Schönheitsfehler. (Meist Designtechnisch)
    * *refactoring* → Code(-style) verbessern, umprogrammieren.
    * *it works but it is wrong* → Unsauber gelöste Probleme, fehlende Komponenten.
    * *new feature* → Neue Funktionen.
    * *discussion* → Zu diskussieren. Diese Issues *sollen nicht* umgesetzt werden, bis dieses Label entfernt wurde.

  Es können auch mehrere Bereichs- bzw. Kategorisierungslabel gleichzeitig verwendet werden.

* **Projects** → Die passende Zuordnung eines GitHub-Projekts für das Kanbansystem.
* **Milestones** → Die Version der Software, zu der dieses Problem gelöst werden muss.

Issues bearbeiten/lösen
^^^^^^^^^^^^^^^^^^^^^^^

In der Issue-Liste auf GitHub kann jeder sehen, was es aktuell zu tun gibt.
Vorzugsweise kümmert man sich um Issues auf dem eigenen Spezial- bzw. Aufgabengebiet. Wenn einem Issue bereits jemand zugeteilt ist, ist unbedingt Rücksprache zur betreffenden Person zu halten (Assignees).
Das eigentliche Lösen (im Regelfall Programmieren) erfolgt als feature-Branch  (siehe unten).

Am Code arbeiten – Die Branches
-------------------------------

Der Hauptbranch ist der **dev**. In ihm ist immer die aktuelle Entwicklung von SchoolApps gespeichert. Er wird bei jeder stabilen Version im **server-Branch** veröffentlicht. Dieser stellt den aktuellen Stand auf dem Server da.

In keinem dieser Branches wird aktiv commited (Ausnahmen bestätigen die Regel), sie werden nur über **Pull Requests** „gefüttert“.

Alle Arbeiten am Code werden in vom dev-Branch abgezweigten Arbeits-Branches durchgeführt. Ein Branch entspricht dabei einer Funktion bzw. einem Issue. Wenn jemand gleichzeitig an mehreren, nicht zusammenhängend Issues arbeitet, wechselt dieser auch die Branches.

Die **Namenskonvention** für diesen Arbeits-Branch ist wie folgt:

* Ist die Änderung, die programmiert wird, ein neues Feature, so wird der Branch so benannt:
    ``feature/<der-name-des-feature-auf-englisch>`` (Bindestriche, kleingeschrieben)
* Ist die Änderung, die programmiert wird, ein Bugfix, so wird der Branch so benannt:
    ``bugfix/<beschreibung-des-bugs-auf-englisch>`` (Bindestriche, kleingeschrieben)
* Ist die Änderung, die programmiert wird, ein Code-Refactoring, so wird der Branch so benannt:
    ``refactor/<der-name-des-feature-auf-englisch>`` (Bindestriche, kleingeschrieben)

Am Code arbeiten – Committen
----------------------------
Nochmal zur Erinnerung: Es wird nur in feature-Branches direkt committed.
Die Commits erfolgen im Gegensatz zu Issues auf **englisch**, bei Bezug zu einem Issue wird das **Issue mit Hashtag** genannt.

Beispiel: ``Solve LDAP connection problems (issue #10)``

Am Code arbeiten – Mergen/Pull Requests
---------------------------------------

Ist man der Meinung, dass die Arbeiten am feature-Branch abgeschlossen sind, stellt man auf GitHub ein **Pull Request** und lässt die Arbeiten vom Rest des Entwicklerteams absegnen.
Dies ist unbedingt zu befolgen.